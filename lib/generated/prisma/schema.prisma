// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(uuid())
  clerkUserId      String           @unique
  email            String           @unique
  name             String?
  imageUrl         String?
  industry         String? // combined industry-sunindustry(e.g. "tech-software-development")
  industryInsights IndustryInsight? @relation(fields: [industry], references: [industry])
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  // profiles
  bio              String?
  experience       Int? // years of experience
  skills           String[] // Array of skills
  assessments      Assessment[]
  resumes          Resume?
  coverLetters     CoverLetter[]
}

model Assessment {
  id              String   @id @default(uuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  quizScore       Float // Overall quiz score
  questions       Json[] // Array of questions and answers, user answers, and correct answers
  category        String // "Techinal or Behavioral"
  improvementTips String? //AI generated tips for improvement
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
}

model Resume {
  id        String   @id @default(uuid())
  userId    String   @unique // one resume per user
  user      User     @relation(fields: [userId], references: [id])
  content   String   @db.Text // Markdown content of the resume
  atsScore  Float? // ATS score
  feedback  String? // AI generated feedback
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CoverLetter {
  id             String   @id @default(uuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  content        String
  jobDescription String? // Job description for the cover letter
  companyName    String? // Company name for the cover letter
  jobTitle       String? // position title for the cover letter
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

model IndustryInsight {
  id                 String        @id @default(uuid())
  industry           String        @unique // combined industry-sunindustry(e.g. "tech-software-development")
  users              User[]
  salaryRange        Json[] // Array of { role: string, salary: number, min: float, max: float , median: float , location: string }
  //industry trends
  growthRate         Float // Growth rate of the industry
  demandLevel        DemandLevel // Demand level (high, medium, low)
  topSkills          String[] // Most in-demand skills in the industry
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  // market trends
  marketOutlook      MarketOutlook // "positive", "negative", "neutral"
  keyTrends          String[] // Array of key trends in the industry
  // Learning Suggestions
  recommendedSkills  String[] // Array of recommended skills for the industry
  recommendedCourses String[] // Array of recommended courses for the industry
  lastUpdated        DateTime      @default(now()) // Last updated date
  nextUpdate         DateTime? // Next update date

  @@index([industry])
}

enum DemandLevel {
  HIGH
  MEDIUM
  LOW
}

enum MarketOutlook {
  POSITIVE
  NEGATIVE
  NEUTRAL
}
